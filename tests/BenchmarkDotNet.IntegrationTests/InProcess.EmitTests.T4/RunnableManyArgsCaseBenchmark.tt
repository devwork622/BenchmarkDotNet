<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ output extension=".cs" #>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using BenchmarkDotNet.Attributes;

using System;
using System.Threading.Tasks;

namespace BenchmarkDotNet.IntegrationTests.InProcess.EmitTests
{
    /// <summary>
    /// Generated class to check emitted msil cases
    /// </summary>
    public class RunnableManyArgsCaseBenchmark
    {
<#
    EmitManyArgsCaseBenchmark("string", 4, "\"\"");
    EmitManyArgsCaseBenchmark("int", 16, "0");
    EmitManyArgsCaseBenchmark("long", 512/sizeof(long), "1L");
    EmitManyArgsCaseBenchmark("byte", 512, "1");
#>
    }
}<#+

    private void EmitManyArgsCaseBenchmark(string type, int argsCount, string argValue)
    {
        var argDefinition = string.Join(
            ", ", 
            Enumerable.Range(0, argsCount).Select(i=>$"{type} arg{i}"));

        var refArgDefinition = string.Join(
            ", ", 
            Enumerable.Range(0, argsCount).Select(i=>$"ref {type} arg{i}"));

        var argValues = string.Join(", ", Enumerable.Repeat(argValue, argsCount));

#>
        // ---- Begin ManyArgsCase(<#=type#> x <#=argsCount#>) ----        

        private <#=type#> _refResultHolder<#=argsCount#>;
        
        [Benchmark, Arguments(<#=argValues#>)]
        public <#=type#> ManyArgsCase<#=argsCount#>(<#=argDefinition#>) => default;

        [Benchmark, Arguments(<#=argValues#>)]
        public Task ManyArgsTaskCase<#=argsCount#>(<#=argDefinition#>) => Task.CompletedTask;

        [Benchmark, Arguments(<#=argValues#>)]
        public ref <#=type#> RefReturnManyArgsCase<#=argsCount#>(<#=refArgDefinition#>) => ref _refResultHolder<#=argsCount#>;
<#+
    }
#>
